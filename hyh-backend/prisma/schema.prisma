generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addresses Address[]
  orders    Order[]
  reviews   Review[]
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  country   String
  city      String
  line1     String
  line2     String?
  phone     String?
  zip       String?
  createdAt DateTime @default(now())
  isDefault Boolean  @default(false)
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  orders    Order[]

  @@index([userId])
  @@index([isDefault])
}

model Category {
  id       String     @id @default(cuid())
  name     String
  slug     String     @unique
  parentId String?
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")
  products Product[]
}

model Media {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  sort      Int?
  productId String?
  bytes     Int?
  createdAt DateTime @default(now())
  height    Int?
  mimeType  String?
  provider  String?
  publicId  String?
  updatedAt DateTime @default(now()) @updatedAt
  variantId String?
  width     Int?
  position  Int?
  isCover   Boolean? @default(false)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   Variant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([variantId])
  @@index([isCover])
}

model Product {
  id             String         @id @default(cuid())
  sku            String?        @unique
  name           String
  slug           String         @unique
  brand          String?
  description    String?
  categoryId     String
  specs          Json?
  care           Json?
  targetGender   String?
  hairType       String[]
  seoTitle       String?
  seoDescription String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  images         Media[]
  category       Category       @relation(fields: [categoryId], references: [id])
  reviews        Review[]
  tags           TagOnProduct[]
  variants       Variant[]

  @@index([categoryId])
  @@index([brand])
  @@index([targetGender])
  @@index([name])
  @@index([hairType], type: Gin)
}

model Variant {
  id             String              @id @default(cuid())
  productId      String
  attributes     Json
  barcode        String?
  price          Int
  compareAtPrice Int?
  stock          Int                 @default(0)
  weight         Int?
  width          Int?
  height         Int?
  length         Int?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  cartItems      CartItem[]
  movements      InventoryMovement[]
  media          Media[]
  orderItems     OrderItem[]
  product        Product             @relation(fields: [productId], references: [id])
}

model InventoryMovement {
  id        String                @id @default(cuid())
  variantId String
  type      InventoryMovementType
  qty       Int
  note      String?
  createdAt DateTime              @default(now())
  variant   Variant               @relation(fields: [variantId], references: [id])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  anonId    String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id            String  @id @default(cuid())
  cartId        String
  variantId     String
  qty           Int
  priceSnapshot Int
  cart          Cart    @relation(fields: [cartId], references: [id])
  variant       Variant @relation(fields: [variantId], references: [id])
}

model Order {
  id             String         @id @default(cuid())
  userId         String?
  status         OrderStatus    @default(PENDING)
  paymentStatus  PaymentStatus  @default(INITIATED)
  shipmentStatus ShipmentStatus @default(NONE)
  addressId      String?
  currency       String         @default("COP")
  subtotal       Int
  discountTotal  Int            @default(0)
  shippingTotal  Int            @default(0)
  taxTotal       Int            @default(0)
  grandTotal     Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  paymentRef     String?
  contactName    String?
  contactPhone   String?
  phone          String?
  city           String?
  note           String?
  paymentMethod  PaymentMethod  @default(COD)
  address        Address?       @relation(fields: [addressId], references: [id])
  user           User?          @relation(fields: [userId], references: [id])
  items          OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  variantId String
  qty       Int
  unitPrice Int
  discount  Int     @default(0)
  order     Order   @relation(fields: [orderId], references: [id])
  variant   Variant @relation(fields: [variantId], references: [id])
}

model Coupon {
  id       String    @id @default(cuid())
  code     String    @unique
  rule     Json
  active   Boolean   @default(true)
  startsAt DateTime?
  endsAt   DateTime?
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int
  title     String?
  body      String?
  createdAt DateTime @default(now())
  approved  Boolean  @default(false)
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Tag {
  id       String         @id @default(cuid())
  name     String         @unique
  slug     String         @unique
  products TagOnProduct[]
}

model TagOnProduct {
  productId String
  tagId     String
  product   Product @relation(fields: [productId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([productId, tagId])
}

model ShippingZone {
  id      String   @id @default(cuid())
  name    String
  cities  String[]
  baseFee Int
  perKg   Int
}

enum Role {
  USER
  ADMIN
}

enum PaymentMethod {
  COD
  WHATSAPP
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  INITIATED
  APPROVED
  DECLINED
  REFUNDED
}

enum ShipmentStatus {
  NONE
  READY
  SHIPPED
  DELIVERED
  RETURNED
}

enum InventoryMovementType {
  IN
  OUT
  ADJUST
}
